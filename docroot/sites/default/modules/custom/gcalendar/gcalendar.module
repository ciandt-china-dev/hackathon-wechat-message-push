<?php

/**
 * @file
 * A module to integrate Drupal with Google Calendar.
 */

/**
 * Implements hook_menu().
 */
function gcalendar_menu() {
  $items = array();

  $items['admin/config/services/gcalendar'] = array(
    'title' => 'GCalendar Settings',
    'description' => 'Configuration Google Calendar Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gcalendar_settings_form'),
    'access arguments' => array('administer gcalendar'),
    'file' => 'gcalendar.admin.inc',
  );

  $items['gcalendar_notify'] = array(
    'title' => 'gcalendar',
    'type' => MENU_CALLBACK,
    'page callback' => 'gcalendar_notify',
    'access callback' => TRUE,
  );

  $items['gcalendar_get_google_token'] = array(
    'title' => 'Gcalendar Get Google Token',
    'page callback' => 'gcalendar_get_google_token',
    'access callback' => TRUE,
    'file' => 'gcalendar.admin.inc',
  );

  $items['gcalendar_set_up_watch_channel'] = array(
    'title' => 'Gcalendar Set up Watch Channel',
    'page callback' => 'gcalendar_set_up_watch_channel',
    'access callback' => TRUE,
    'file' => 'gcalendar.admin.inc',
  );

  return $items;
}

/**
 * @throws \Exception
 */
function gcalendar_notify() {
  global $user;

  if (!isset($_SERVER['HTTP_X_GOOG_CHANNEL_ID'])) {
    // illegal request
    http_response_code(404);

    drupal_exit();
  }

  $channel_id = $_SERVER['HTTP_X_GOOG_CHANNEL_ID'];

  $channel_user = gcalendar_find_channel_user($channel_id);

  if (!$channel_user) {
    // no valid user found, should remove this watch
    $resource_id = $_SERVER['HTTP_X_GOOG_RESOURCE_ID'];
    gcalendar_stop_watch_channel($channel_id, $resource_id);
    drupal_exit();
  }

  $client = _gcalendar_get_google_client();

  $service = new Google_Service_Calendar($client);

  $update = array();

  if (isset($user->data['calendar_sync_token'])) {
    $syncToken = $user->data['calendar_sync_token'];
    $user->data['calendar_sync_token'] = gcalendar_sync_events($service, $update, NULL, $syncToken);
  }
  else {
    $user->data['calendar_sync_token'] = gcalendar_sync_events($service, $update);
  }

  user_save($user);

  watchdog('calendar changed events', '<pre>' . var_export($update, TRUE) . '</pre>');

  // hook for send the updates

  // call wechat to send the updates
  module_load_include('inc', 'wechat_push', 'inc/wechat_push');

  foreach ($update as $event) {
    // TODO Theme event for output
    watchdog('calendar changed events', '<pre>' . var_export($event, TRUE) . '</pre>');
    watchdog('calendar changed events', '<pre>' . var_export($event->getSummary(), TRUE) . '</pre>');
    wechat_set_message(NULL, $event->getSummary());
  }

  http_response_code(200);

  drupal_exit();
}

/**
 * Get Google token.
 *
 * The refresh token most be requested to google, which involves redirecting to
 * google for it so the user can confirm the permissions being asked for.
 */
function gcalendar_get_google_token($force = FALSE) {
  global $user;

  $client = _gcalendar_get_google_client();

  // TODO whether refresh token is include inside the access token
  if ($client->getAccessToken() && isset($user->data['gcalendar_refresh_token']) && !$force) {
    // no need to get token
    // just return
    return;
  }

  $client->setRedirectUri('http://' . $_SERVER['HTTP_HOST'] . '/gcalendar_get_google_token');

  if (isset($_GET['code'])) {
    $access_token = $client->authenticate($_GET['code']);

    $user->data['gcalendar_access_token'] = $access_token;

    watchdog('gcalendar', 'access token: @token', array('@token' => $access_token), WATCHDOG_DEBUG);

    if ($refresh_token = $client->getRefreshToken()) {
      $user->data['gcalendar_refresh_token'] = $refresh_token;

      watchdog('gcalendar', 'refresh token: @token', array('@token' => $refresh_token), WATCHDOG_DEBUG);
    }
    else {
      // no refresh token avaialbe,
    }

    user_save($user);

    // TODO redirect to other page
  }
  else {
    $authUrl = $client->createAuthUrl();
    drupal_goto($authUrl);
  }
}

/**
 * TODO Create notification channel
 *
 * @return array
 */

/*
 *  Initialize watch channel for Google Calendar push notifications
 */
function gcalendar_init_watch_channel() {
  global $user;
  $user = user_load($user->uid);
  try {
    $client = _gcalendar_get_google_client();
    $service = new Google_Service_Calendar($client);

    $channel_id = uuid_generate();
    $channel = new Google_Service_Calendar_Channel();
    $channel->setId($channel_id);
    $channel->setType('web_hook');
    $channel->setAddress("https://" . $_SERVER['HTTP_HOST'] . "/gcalendar");

    $return = $service->events->watch('primary', $channel);

    watchdog('calendar', '<pre>' . var_export($return, TRUE) . '</pre>');

    if ($channel_id = $return->getId()) {
      $user->field_gcalendar_watch_channel_id[LANGUAGE_NONE][0]['value'] = $channel_id;
      $user->field_gcalendar_watch_channel_id[LANGUAGE_NONE][0]['format'] = NULL;
      $user->field_gcalendar_watch_channel_id[LANGUAGE_NONE][0]['safe_value'] = $channel_id;

      user_save($user);
    }
  } catch (Exception $e) {
    watchdog('gcalendar', 'Unable to connect to google, error: @error', array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }
}

function gcalendar_stop_watch_channel($channel_id, $resource_id) {
  $client = _gcalendar_get_google_client();

  $channel = new Google_Service_Calendar_Channel();
  $channel->setId($channel_id);
  $channel->setResourceId($resource_id);

  $service = new Google_Service_Calendar($client);
  $service->channels->stop($channel);

  drupal_exit();
}

function gcalendar_find_channel_user($channel_id) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_gcalendar_watch_channel_id', 'value', $channel_id, '=')
    ->range(0, 1);

  $result = $query->execute();

  if (isset($result['user'])) {
    $uids = array_keys($result['user']);
    $users = entity_load('user', $uids);
    $user = reset($users);
    watchdog('calendar', '<pre>' . var_export($user, TRUE) . '</pre>');

    return $user;
  }
  else {
    return FALSE;
  }
}

function _gcalendar_get_google_client($client_id = NULL, $client_secret = NULL) {
  global $user;

  if ($path = libraries_get_path('google-api-php-client')) {
    require_once $path . '/vendor/autoload.php';
  }
  else {
    watchdog('gcalendar', 'Unable to find google api library, see gcalendar README for instructions.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (!$client_id) {
    $client_id = variable_get('gcalendar_clientid', '');
  }

  if (!$client_secret) {
    $client_secret = variable_get('gcalendar_secret', '');
  }

  // todo check for client_id and client_secret
  if (!$client_id || !$client_secret) {
    // emtpy client_id or client_secret, die
    return FALSE;
  }

  try {
    $client = new Google_Client();
    $client->setClientId($client_id);
    $client->setClientSecret($client_secret);

    $client->addScope("https://www.googleapis.com/auth/calendar");

    if (isset($user->data['gcalendar_access_token'])) {
      $access_token = $user->data['gcalendar_access_token'];
      if ($client->isAccessTokenExpired() && isset($user->data['gcalendar_refresh_token'])) {
        watchdog('gcalendar', 'access token expired, refreshing');
        $client->refreshToken($user->data['gcalendar_refresh_token']);
        $access_token = $client->getAccessToken();
        $user->data['gcalendar_access_token'] = $access_token;
        user_save($user);
      }
      $client->setAccessToken($access_token);
    }
    else {
      // no access token
      watchdog('gcalendar', 'no access token');
    }

    return $client;
  } catch (Exception $e) {
    watchdog('gcalendar', 'Unable to connect to google, error: @error', array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Implements hook_action_info().
 */
function gcalendar_sync_events(Google_Service_Calendar $service, &$result = array(), &$updated = array(), $options = array(), $pageToken = NULL, $syncToken = NULL) {
  $optParams = array();
  if ($pageToken) {
    $optParams['pageToken'] = $pageToken;
  }
  if ($syncToken) {
    $optParams['syncToken'] = $syncToken;
  }

  $optParams = array_merge($optParams, $options);

  watchdog('gcalendar', 'Page Token: ' . $pageToken . 'Sync Token:' . $syncToken);

  $events = $service->events->listEvents('primary', $optParams);

  foreach ($events->getItems() as $event) {
    if ($syncToken) {
      $updated[] = $event;
    }
    $result[] = $event;
  }

  while (!$syncToken = $events->getNextSyncToken()) {
    $pageToken = $events->getNextPageToken();

    return gcalendar_sync_events($service, $result, $updated, $options, $pageToken, $syncToken);
  }

  return $syncToken;
}
